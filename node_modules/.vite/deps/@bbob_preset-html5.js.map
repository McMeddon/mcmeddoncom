{
  "version": 3,
  "sources": ["../../@bbob/preset/es/index.js", "../../@bbob/preset-html5/es/defaultTags.js", "../../@bbob/preset-html5/es/index.js"],
  "sourcesContent": ["/* eslint-disable indent */ const isTagNode = (el)=>typeof el === 'object' && !!el.tag;\nfunction process(tags, tree, core, options) {\n    tree.walk((node)=>isTagNode(node) && tags[node.tag] ? tags[node.tag](node, core, options) : node);\n}\n/**\n * Creates preset for @bbob/core\n * @param defTags {Object}\n * @param processor {Function} a processor function of tree\n * @returns {function(*=): function(*=, *=): void}\n */ function createPreset(defTags, processor = process) {\n    const presetFactory = (opts = {})=>{\n        presetFactory.options = Object.assign(presetFactory.options || {}, opts);\n        const presetExecutor = (tree, core)=>processor(defTags, tree, core, presetFactory.options);\n        presetExecutor.options = presetFactory.options;\n        return presetExecutor;\n    };\n    presetFactory.extend = (callback)=>createPreset(callback(defTags, presetFactory.options), processor);\n    return presetFactory;\n}\nexport { createPreset };\nexport default createPreset;\n", "/* eslint-disable no-plusplus,no-lonely-if */ import { getUniqAttr, isStringNode, isTagNode, TagNode } from '@bbob/plugin-helper';\nconst isStartsWith = (node, type)=>node[0] === type;\nconst styleMap = {\n    color: (val)=>`color:${val};`,\n    size: (val)=>`font-size:${val};`\n};\nconst getStyleFromAttrs = (attrs)=>Object.keys(attrs).reduce((acc, key)=>styleMap[key] ? acc.concat(styleMap[key](attrs[key])) : acc, []).join(' ');\nconst asListItems = (content)=>{\n    let listIdx = 0;\n    const listItems = [];\n    const createItemNode = ()=>TagNode.create('li');\n    const ensureListItem = (val)=>{\n        listItems[listIdx] = listItems[listIdx] || val;\n    };\n    const addItem = (val)=>{\n        if (listItems[listIdx] && listItems[listIdx].content) {\n            listItems[listIdx].content = listItems[listIdx].content.concat(val);\n        } else {\n            listItems[listIdx] = listItems[listIdx].concat(val);\n        }\n    };\n    content.forEach((el)=>{\n        if (isStringNode(el) && isStartsWith(el, '*')) {\n            if (listItems[listIdx]) {\n                listIdx++;\n            }\n            ensureListItem(createItemNode());\n            addItem(el.substr(1));\n        } else if (isTagNode(el) && TagNode.isOf(el, '*')) {\n            if (listItems[listIdx]) {\n                listIdx++;\n            }\n            ensureListItem(createItemNode());\n        } else if (!isTagNode(listItems[listIdx])) {\n            listIdx++;\n            ensureListItem(el);\n        } else if (listItems[listIdx]) {\n            addItem(el);\n        } else {\n            ensureListItem(el);\n        }\n    });\n    return [].concat(listItems);\n};\nconst renderUrl = (node, render)=>getUniqAttr(node.attrs) ? getUniqAttr(node.attrs) : render(node.content);\nconst toNode = (tag, attrs, content)=>({\n        tag,\n        attrs,\n        content\n    });\nconst toStyle = (style)=>({\n        style\n    });\nexport default {\n    b: (node)=>toNode('span', toStyle('font-weight: bold;'), node.content),\n    i: (node)=>toNode('span', toStyle('font-style: italic;'), node.content),\n    u: (node)=>toNode('span', toStyle('text-decoration: underline;'), node.content),\n    s: (node)=>toNode('span', toStyle('text-decoration: line-through;'), node.content),\n    url: (node, { render  }, options)=>toNode('a', {\n            href: renderUrl(node, render, options)\n        }, node.content),\n    img: (node, { render  })=>toNode('img', {\n            src: render(node.content)\n        }, null),\n    quote: (node)=>toNode('blockquote', {}, [\n            toNode('p', {}, node.content)\n        ]),\n    code: (node)=>toNode('pre', {}, node.content),\n    style: (node)=>toNode('span', toStyle(getStyleFromAttrs(node.attrs)), node.content),\n    list: (node)=>{\n        const type = getUniqAttr(node.attrs);\n        return toNode(type ? 'ol' : 'ul', type ? {\n            type\n        } : {}, asListItems(node.content));\n    }\n};\n", "/* eslint-disable indent */ import { createPreset } from '@bbob/preset';\nimport defaultTags from './defaultTags';\nexport default createPreset(defaultTags);\n"],
  "mappings": "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",
  "names": ["isTagNode"]
}
